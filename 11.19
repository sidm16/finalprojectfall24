const float dMax = 28.0;
#include "shapes.stoy"
#include "matrices.stoy"
#include "lygia/math/rotate3dX.glsl"


float snoise(vec2 p) {
    vec2 fracPart = fract(p);
    vec2 intPart = floor(p);
    float v = intPart.x + intPart.y * 1000.0;
    vec4 randVals = vec4(v, v + 1.0, v + 1000.0, v + 1001.0);
    randVals = fract(100000.0 * sin(randVals * 0.001));
    fracPart = fracPart * fracPart * (3.0 - 2.0 * fracPart);
    return 2.0 * (mix(mix(randVals.x, randVals.y, fracPart.x),
                        mix(randVals.z, randVals.w, fracPart.x), fracPart.y)) - 1.0;
}

float terrain(vec2 p, int octaves) {
    float height = 0.0;
    float weight = 0.5;
    float frequency = 0.4;
    
    for (int i = 0; i < 12; i++) {
        if (i < octaves) {
            height += weight * snoise(p * frequency);
        } else {
            break;
        }
        weight *= 0.5;
        frequency *= 2.0;
    }
    return height;
}

float smoothMin(float d1, float d2, float k) {
    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);
    return mix(d2, d1, h) - k * h * (1.0 - h);
}

float birdSDF(vec3 p, vec3 cameraPos, vec3 forward) {
    float t = iTime;
    float dt = 0.01;
    
    float birdDistance = 1.0; // Distance from camera
    vec3 birdPos = cameraPos + forward * birdDistance + vec3(1.0,-.4, -.3);

    // Bird's position at time t + dt (for flight direction)
    vec3 birdPosNext = cameraPos + forward * birdDistance + vec3(0.0, 1.5, 0.0);

    // Flight direction
    vec3 dir = normalize(birdPos);
        // vec3 dir = normalize(birdPosNext - birdPos);
    vec3 up = vec3(0.0, 1.0, 0.0);

    // Rotation matrix
    vec3 xAxis = dir;
    vec3 zAxis = normalize(cross(up, xAxis));
    vec3 yAxis = cross(zAxis, xAxis);
    mat3 birdRotation = mat3(xAxis, yAxis, zAxis);

    // Transform point to bird's space
    vec3 pLocal = birdRotation * (p - birdPos);

    // Scale down the bird
    float birdScale = 0.3; // Adjust this value to make the bird smaller
    pLocal /= birdScale;

    // Body (Ellipsoid)
    vec3 bodyScale = vec3(1.0, 0.6, 0.6);
    float body = sdEllipsoid(pLocal / bodyScale, vec3(1.0));

    // Head (Sphere)
    float head = sphereSDF(pLocal - vec3(0.8, 0.3, 0.0), 0.3);

    // Beak (Cone along X-axis)
    float beak = sdConeX(pLocal - vec3(1.1, 0.3, 0.0), 0.0, 0.4, 0.1, 0.0);

    // Wings
    float wingFlap = sin(t * 6.5) * 0.4;

    // Left Wing
    vec3 leftWingP = pLocal - vec3(-0.2, 0.0, 0.6);
    mat3 leftWingRot = rotationY(0.2) * rotationX(wingFlap);
    leftWingP = leftWingRot * leftWingP;
    float leftWing = sdEllipsoid(leftWingP, vec3(0.6, 0.05, 0.3));

    // Right Wing
    vec3 rightWingP = pLocal - vec3(-0.2, 0.0, -0.6);
    mat3 rightWingRot = rotationY(-0.2) * rotationX(-wingFlap);
    rightWingP = rightWingRot * rightWingP;
    float rightWing = sdEllipsoid(rightWingP, vec3(0.6, 0.05, 0.3));

    // Combine all parts
    float bird = smoothMin(body, head, 0.2);
    bird = smoothMin(bird, beak, 0.1);
    bird = smoothMin(bird, leftWing, 0.1);
    bird = smoothMin(bird, rightWing, 0.1);

    bird *= birdScale;

    return bird;
}

// Map Function
vec2 map(vec3 p, int octaves, vec3 cameraPos, vec3 forward) {
    float minDist = dMax;
    float dist;
    float materialID = -1.0;
    
    // Terrain SDF
    float terrainHeight = terrain(p.xz, octaves);
    terrainHeight += smoothstep(-0.6, 1.2, terrainHeight);
    dist = p.y - terrainHeight;
    if (dist < minDist) {
        minDist = dist;
        materialID = 0.0; // Terrain material
    }
    
    if (terrainHeight < 0.5) {
        float secondaryHeight = 0.5 * terrain(p.xz * 0.9, 3);
        dist = p.y - secondaryHeight;
        if (dist < minDist) {
            minDist = dist;
            materialID = 1.0; // Secondary terrain material
        }
    }
    
    // Bird SDF
    float birdDist = birdSDF(p, cameraPos, forward);
    if (birdDist < minDist) {
        minDist = birdDist;
        materialID = 2.0; // Bird material
    }
    
    return vec2(minDist, materialID);
}

// Cast Ray Function
vec2 castRay(vec3 ro, vec3 rd, int octaves, vec3 cameraPos, vec3 forward) {
    const float epsilon = 0.001;
    float t = 0.0;
    float h = epsilon * 2.0;
    float matID = -1.0;
    
    for (int i = 0; i < 100; i++) { // Increased steps for accuracy
        if (abs(h) > epsilon && t < dMax) {
            vec2 result = map(ro + rd * t, octaves, cameraPos, forward);
            h = result.x;
            matID = result.y;
            t += h;
        } else {
            break;
        }
    }
    
    if (t > dMax) {
        matID = -1.0;
    }
    
    return vec2(t, matID);
}

// Normal Calculation Function
vec3 calcNormal(vec3 p, int octaves, vec3 cameraPos, vec3 forward) {
    const vec3 offset = vec3(0.002, 0.0, 0.0);
    float dx = map(p + offset.xyy, octaves, cameraPos, forward).x - map(p - offset.xyy, octaves, cameraPos, forward).x;
    float dy = map(p + offset.yxy, octaves, cameraPos, forward).x - map(p - offset.yxy, octaves, cameraPos, forward).x;
    float dz = map(p + offset.yyx, octaves, cameraPos, forward).x - map(p - offset.yyx, octaves, cameraPos, forward).x;
    return normalize(vec3(dx, dy, dz));
}

// Shadows Function
float shadows(vec3 ro, vec3 rd, float tMax, float k, int octaves, vec3 cameraPos, vec3 forward) {
    float shadow = 1.0;
    float t = 0.1;
    
    for(int i = 0; i < 22; i++) {
        if(t < tMax) {
            float h = map(ro + rd * t, octaves, cameraPos, forward).x;
            shadow = min(shadow, k * h / t);
            t += h;
            if (h < 0.001) {
                return 0.0;
            }
        } else {
            break;
        }
    }
    return clamp(shadow, 0.0, 1.0);
}

// Rendering Function
vec3 render(vec3 ro, vec3 rd, vec3 cameraPos, vec3 forward) {
    const int geoLOD = 4;
    vec3 finalColor = vec3(0.3, 0.4, 0.6);
    vec2 rayResult = castRay(ro, rd, geoLOD, cameraPos, forward);
    
    vec3 lightDir = normalize(vec3(1.0, 0.5, 0.0));
    vec3 lightColor = vec3(1.0, 0.9, 0.7);
    
    vec3 hitPos = ro + rd * rayResult.x;
    
    if (rayResult.y < -0.5) {
        // Sky
        float sunIntensity = clamp(dot(rd, lightDir), 0.0, 1.0);
        finalColor += 0.8 * lightColor * sunIntensity * 6.0;
        
        float cloudNoise = snoise(hitPos.xz * 0.05);
        finalColor = mix(finalColor, vec3(1.0, 1.0, 0.8), smoothstep(0.0, 1.5, cloudNoise));
        return finalColor;
    }
    
    int normalLOD = int(max(2.0, 12.0 - 11.0 * rayResult.x / dMax));
    vec3 normal = calcNormal(hitPos, normalLOD, cameraPos, forward);
    
    if (abs(rayResult.y - 2.0) < 0.1) {
        // Bird rendering
        float ambient = 0.1;
        float diffuse = max(dot(normal, lightDir), 0.0);
        float specular = pow(max(dot(reflect(-lightDir, normal), -rd), 0.0), 16.0);
        
        finalColor = vec3(0.65, 0.4, 0.2); // Bird base color
        finalColor = finalColor * (ambient + diffuse * 0.6) + vec3(1.0) * specular * 0.2;
    } else if (rayResult.y > -0.5 && rayResult.y < 0.5) {

        finalColor = mix(vec3(0.4, 0.1, 0.0), vec3(0.7, 0.6, 0.3), step(0.9, normal.y));
        
        float terrainDetail = 0.5 * (snoise(hitPos.xy * vec2(2.0, 15.0)) + 1.0);
        finalColor = mix(vec3(0.6, 0.5, 0.4), finalColor, terrainDetail * smoothstep(0.0, 0.7, normal.y));
        
        float ambient = clamp(0.5 + 0.5 * normal.y, 0.0, 1.0);
        float diffuse = clamp(dot(normal, lightDir), 0.0, 2.0);
        
        if (diffuse > 0.05) {
            diffuse *= shadows(hitPos, lightDir, 8.0, 12.0, geoLOD, cameraPos, forward);
        }
        
        finalColor += (0.4 * ambient) * lightColor;
        finalColor *= (1.8 * diffuse) * lightColor;
    } else if (rayResult.y > 0.5) {

        finalColor = mix(vec3(0.3, 0.2, 0.0), vec3(0.7, 0.6, 0.3), normal.y);
        
        float ambient = clamp(0.5 + 0.5 * normal.y, 0.0, 1.0);
        float diffuse = clamp(dot(normal, lightDir), 0.0, 2.0);
        
        if (diffuse > 0.05) {
            diffuse *= shadows(hitPos, lightDir, 8.0, 12.0, geoLOD, cameraPos, forward);
        }
        
        finalColor += (0.4 * ambient) * lightColor;
        finalColor *= (1.8 * diffuse) * lightColor;
    }
    
    // Fog
    float fogFactor = exp(-0.035 * rayResult.x * rayResult.x);
    finalColor = mix(vec3(0.3, 0.3, 0.35), finalColor, fogFactor);
    
    return finalColor;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 normalizedPos = 2.0 * (fragCoord.xy / iResolution.xy) - 1.0;
    normalizedPos.x *= iResolution.x / iResolution.y;
    
    float camX = iTime;
    float camY = cos( (iTime ));
    float camZ = sin(.3 * iTime);
    vec3 cameraPos = vec3(camX, camY, camZ);
    cameraPos.y = terrain(cameraPos.xz, 1) + 2.0;
    
    const vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 lookAt = cameraPos + vec3(1.0, 0.0, 0.0);
    
    vec3 forward = normalize(lookAt - cameraPos);
    vec3 right = normalize(cross(forward, up));
    vec3 upDir = cross(right, forward);
    
    vec3 rayDir = normalize(normalizedPos.x * right + normalizedPos.y * upDir + 2.0 * forward);
    vec3 finalColor = render(cameraPos, rayDir, cameraPos, forward);
    
    fragColor = vec4(finalColor, 1.0);
}
