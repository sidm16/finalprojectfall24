#define MAX_DIST 28.0

#include "shapes.stoy"
#include "matrices.stoy"
#include "lygia/math/rotate3dX.glsl"

#define MATERIAL_TERRAIN 0.0
#define MATERIAL_OCEAN 1.0
#define MATERIAL_BIRD 2.0

#define DRAG_MULT 0.38
#define WATER_DEPTH 0.3
#define ITERATIONS_RAYMARCH 12
#define ITERATIONS_NORMAL 36

#define NormalizedMouse (iMouse.xy / iResolution.xy)

float cnoise(vec2 p) {
    vec2 fracPart = fract(p);
    vec2 intPart = floor(p);
    float v = intPart.x + intPart.y * 1000.0;
    vec4 randVals = vec4(v, v + 1.0, v + 1000.0, v + 1001.0);
    randVals = fract(100000.0 * sin(randVals * 0.001));
    fracPart = fracPart * fracPart * (3.0 - 2.0 * fracPart);
    return 2.0 * (mix(mix(randVals.x, randVals.y, fracPart.x),
                      mix(randVals.z, randVals.w, fracPart.x), fracPart.y)) - 1.0;
}

float terrain(vec2 p, int octaves) {
    float height = 0.0;
    float weight = 0.5;
    float frequency = 0.4;
    
    for (int i = 0; i < 12; i++) {
        if (i < octaves) {
            height += weight * cnoise(p * frequency);
        } else {
            break;
        }
        weight *= 0.5;
        frequency *= 2.0;
    }
    return height;
}

float smoothMin(float d1, float d2, float k) {
    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);
    return mix(d2, d1, h) - k * h * (1.0 - h);
}

float birdSDF(vec3 p, vec3 cameraPos, vec3 forward) {
    float t = iTime;
    float dt = 0.01;
    
    float birdDistance = 1.0;
    vec3 birdPos = cameraPos + forward * birdDistance + vec3(1.0, -0.5, -0.3);

    vec3 birdPosNext = cameraPos + forward * birdDistance + vec3(0.0, 1.5, 0.0);

    vec3 dir = normalize(birdPos);
    vec3 up = vec3(0.0, 1.0, 0.0);

    vec3 xAxis = dir;
    vec3 zAxis = normalize(cross(up, xAxis));
    vec3 yAxis = cross(zAxis, xAxis);
    mat3 birdRotation = mat3(xAxis, yAxis, zAxis);

    vec3 pLocal = birdRotation * (p - birdPos);

    float birdScale = 0.3;
    pLocal /= birdScale;

    vec3 bodyScale = vec3(1.0, 0.6, 0.6);
    float body = sdEllipsoid(pLocal / bodyScale, vec3(1.0));

    float head = sphereSDF(pLocal - vec3(0.8, 0.3, 0.0), 0.3);

    float beak = sdConeX(pLocal - vec3(1.1, 0.3, 0.0), 0.0, 0.4, 0.1, 0.0);

    float wingFlap = sin(t * 6.5) * 0.4;

    vec3 leftWingP = pLocal - vec3(-0.2, 0.0, 0.6);
    mat3 leftWingRot = rotationY(0.2) * rotationX(wingFlap);
    leftWingP = leftWingRot * leftWingP;
    float leftWing = sdEllipsoid(leftWingP, vec3(0.6, 0.05, 0.3));

    vec3 rightWingP = pLocal - vec3(-0.2, 0.0, -0.6);
    mat3 rightWingRot = rotationY(-0.2) * rotationX(-wingFlap);
    rightWingP = rightWingRot * rightWingP;
    float rightWing = sdEllipsoid(rightWingP, vec3(0.6, 0.05, 0.3));

    float bird = smoothMin(body, head, 0.2);
    bird = smoothMin(bird, beak, 0.1);
    bird = smoothMin(bird, leftWing, 0.1);
    bird = smoothMin(bird, rightWing, 0.1);

    bird *= birdScale;

    return bird;
}

vec2 wavedx(vec2 position, vec2 direction, float frequency, float timeshift) {
  float x = dot(direction, position) * frequency + timeshift;
  float wave = exp(sin(x) - 1.0);
  float dx = wave * cos(x);
  return vec2(wave, -dx);
}

float getwaves(vec2 position, int iterations) {
  float wavePhaseShift = length(position) * 0.1;
  float iter = 0.0;
  float frequency = 1.0;
  float timeMultiplier = 2.0;
  float weight = 1.0;
  float sumOfValues = 0.0;
  float sumOfWeights = 0.0;
  for(int i=0; i < iterations; i++) {
    vec2 p = vec2(sin(iter), cos(iter));
    
    vec2 res = wavedx(position, p, frequency, iTime * timeMultiplier + wavePhaseShift);

    position += p * res.y * weight * DRAG_MULT;

    sumOfValues += res.x * weight;
    sumOfWeights += weight;

    weight = mix(weight, 0.0, 0.2);
    frequency *= 1.18;
    timeMultiplier *= 1.07;

    iter += 1232.399963;
  }
  return sumOfValues / sumOfWeights;
}

float raymarchwater(vec3 camera, vec3 start, vec3 end, float depth) {
  vec3 pos = start;
  vec3 dir = normalize(end - start);
  for(int i=0; i < 64; i++) {
    float height = getwaves(pos.xz, ITERATIONS_RAYMARCH) * depth - depth;
    if(height + 0.01 > pos.y) {
      return distance(pos, camera);
    }
    pos += dir * (pos.y - height);
  }
  return distance(start, camera);
}

vec3 calculateNormal(vec2 pos, float e, float depth) {
  vec2 ex = vec2(e, 0);
  float H = getwaves(pos.xy, ITERATIONS_NORMAL) * depth;
  vec3 a = vec3(pos.x, H, pos.y);
  return normalize(
    cross(
      a - vec3(pos.x - e, getwaves(pos.xy - ex.xy, ITERATIONS_NORMAL) * depth, pos.y), 
      a - vec3(pos.x, getwaves(pos.xy + ex.yx, ITERATIONS_NORMAL) * depth, pos.y + e)
    )
  );
}

mat3 createRotationMatrixAxisAngle(vec3 axis, float angle) {
  float s = sin(angle);
  float c = cos(angle);
  float oc = 1.0 - c;
  return mat3(
    oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 
    oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 
    oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c
  );
}

vec3 getRay(vec2 fragCoord) {
  vec2 uv = ((fragCoord.xy / iResolution.xy) * 2.0 - 1.0) * vec2(iResolution.x / iResolution.y, 1.0);
  vec3 proj = normalize(vec3(uv.x, uv.y, 1.5));
  if(iResolution.x < 600.0) {
    return proj;
  }
  return createRotationMatrixAxisAngle(vec3(0.0, -1.0, 0.0), 3.0 * ((NormalizedMouse.x + 0.5) * 2.0 - 1.0)) 
    * createRotationMatrixAxisAngle(vec3(1.0, 0.0, 0.0), 0.5 + 1.5 * (((NormalizedMouse.y == 0.0 ? 0.27 : NormalizedMouse.y) * 1.0) * 2.0 - 1.0))
    * proj;
}

float intersectPlane(vec3 origin, vec3 direction, vec3 point, vec3 normal) { 
  return clamp(dot(point - origin, normal) / dot(direction, normal), -1.0, 9991999.0); 
}

vec3 extra_cheap_atmosphere(vec3 raydir, vec3 sundir) {
  float special_trick = 1.0 / (raydir.y * 1.0 + 0.1);
  float special_trick2 = 1.0 / (sundir.y * 11.0 + 1.0);
  float raysundt = pow(abs(dot(sundir, raydir)), 2.0);
  float sundt = pow(max(0.0, dot(sundir, raydir)), 8.0);
  float mymie = sundt * special_trick * 0.2;
  vec3 suncolor = mix(vec3(1.0), max(vec3(0.0), vec3(1.0) - vec3(5.5, 13.0, 22.4) / 22.4), special_trick2);
  vec3 bluesky= vec3(5.5, 13.0, 22.4) / 22.4 * suncolor;
  vec3 bluesky2 = max(vec3(0.0), bluesky - vec3(5.5, 13.0, 22.4) * 0.002 * (special_trick + -6.0 * sundir.y * sundir.y));
  bluesky2 *= special_trick * (0.24 + raysundt * 0.24);
  return bluesky2 * (1.0 + 1.0 * pow(1.0 - raydir.y, 3.0));
} 

vec3 getSunDirection() {
  return normalize(vec3(-0.0773502691896258 , 0.5 + sin(iTime * 0.2 + 2.6) * 0.45 , 0.5773502691896258));
}

vec3 getAtmosphere(vec3 dir) {
   return extra_cheap_atmosphere(dir, getSunDirection()) * 0.5;
}

float getSun(vec3 dir) { 
  return pow(max(0.0, dot(dir, getSunDirection())), 720.0) * 210.0;
}

vec3 aces_tonemap(vec3 color) {  
  mat3 m1 = mat3(
    0.59719, 0.07600, 0.02840,
    0.35458, 0.90834, 0.13383,
    0.04823, 0.01566, 0.83777
  );
  mat3 m2 = mat3(
    1.60475, -0.10208, -0.00327,
    -0.53108,  1.10813, -0.07276,
    -0.07367, -0.00605,  1.07602
  );
  vec3 v = m1 * color;  
  vec3 a = v * (v + 0.0245786) - 0.000090537;
  vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;
  return pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));  
}

vec2 map(vec3 p, int octaves, vec3 cameraPos, vec3 forward) {
    float minDist = MAX_DIST;
    float dist;
    float materialID = -1.0;
    
    float terrainHeight = terrain(p.xz, octaves);
    terrainHeight += smoothstep(-0.6, 1.2, terrainHeight);
    dist = p.y - terrainHeight;
    if (dist < minDist) {
        minDist = dist;
        materialID = MATERIAL_TERRAIN;
    }
    
    if (p.y < 0.0) {
        float oceanHeight = getwaves(p.xz, ITERATIONS_RAYMARCH) * WATER_DEPTH;
        dist = p.y - (-oceanHeight);
        if (dist < minDist) {
            minDist = dist;
            materialID = MATERIAL_OCEAN;
        }
    }
    
    float birdDist = birdSDF(p, cameraPos, forward);
    if (birdDist < minDist) {
        minDist = birdDist;
        materialID = MATERIAL_BIRD;
    }
    
    return vec2(minDist, materialID);
}

vec2 castRay(vec3 ro, vec3 rd, int octaves, vec3 cameraPos, vec3 forward) {
    const float epsilon = 0.001;
    float t = 0.0;
    float h = epsilon * 2.0;
    float matID = -1.0;
    
    for (int i = 0; i < 100; i++) { 
        if (abs(h) > epsilon && t < MAX_DIST) {
            vec2 result = map(ro + rd * t, octaves, cameraPos, forward);
            h = result.x;
            matID = result.y;
            t += h;
        } else {
            break;
        }
    }
    
    if (t > MAX_DIST) {
        matID = -1.0;
    }
    
    return vec2(t, matID);
}

vec3 calcNormal(vec3 p, int octaves, vec3 cameraPos, vec3 forward) {
    const vec3 offset = vec3(0.002, 0.0, 0.0);
    float dx = map(p + offset.xyy, octaves, cameraPos, forward).x - map(p - offset.xyy, octaves, cameraPos, forward).x;
    float dy = map(p + offset.yxy, octaves, cameraPos, forward).x - map(p - offset.yxy, octaves, cameraPos, forward).x;
    float dz = map(p + offset.yyx, octaves, cameraPos, forward).x - map(p - offset.yyx, octaves, cameraPos, forward).x;
    return normalize(vec3(dx, dy, dz));
}

float shadows(vec3 ro, vec3 rd, float tMax, float k, int octaves, vec3 cameraPos, vec3 forward) {
    float shadow = 1.0;
    float t = 0.1;
    
    for(int i = 0; i < 22; i++) {
        if(t < tMax) {
            float h = map(ro + rd * t, octaves, cameraPos, forward).x;
            shadow = min(shadow, k * h / t);
            t += h;
            if (h < 0.001) {
                return 0.0;
            }
        } else {
            break;
        }
    }
    return clamp(shadow, 0.0, 1.0);
}

vec3 render(vec3 ro, vec3 rd, vec3 cameraPos, vec3 forward) {
    const int geoLOD = 4;
    vec3 finalColor = vec3(0.3, 0.4, 0.6);
    vec2 rayResult = castRay(ro, rd, geoLOD, cameraPos, forward);
    
    vec3 lightDir = normalize(vec3(1.0, 0.5, 0.0));
    vec3 lightColor = vec3(1.0, 0.9, 0.7);
    
    vec3 hitPos = ro + rd * rayResult.x;
    
    if (rayResult.y < -0.5) {
        float sunIntensity = clamp(dot(rd, lightDir), 0.0, 1.0);
        finalColor += 0.8 * lightColor * sunIntensity * 6.0;
        
        float cloudNoise = cnoise(hitPos.xz * 0.05);
        finalColor = mix(finalColor, vec3(1.0, 1.0, 0.8), smoothstep(0.0, 1.5, cloudNoise));
        return finalColor;
    }
    
    int normalLOD = int(max(2.0, 12.0 - 11.0 * rayResult.x / MAX_DIST));
    vec3 normal = calcNormal(hitPos, normalLOD, cameraPos, forward);
    
    if (rayResult.y == MATERIAL_BIRD) {
        float ambient = 0.1;
        float diffuse = max(dot(normal, lightDir), 0.0);
        float specular = pow(max(dot(reflect(-lightDir, normal), -rd), 0.0), 16.0);
        
        finalColor = vec3(0.65, 0.4, 0.2);
        finalColor = finalColor * (ambient + diffuse * 0.6) + vec3(1.0) * specular * 0.2;
    }
    else if (rayResult.y == MATERIAL_TERRAIN) {
        finalColor = mix(vec3(0.4, 0.1, 0.0), vec3(0.7, 0.6, 0.3), step(0.9, normal.y));
        
        float terrainDetail = 0.5 * (cnoise(hitPos.xy * vec2(2.0, 15.0)) + 1.0);
        finalColor = mix(vec3(0.6, 0.5, 0.4), finalColor, terrainDetail * smoothstep(0.0, 0.7, normal.y));
        
        float ambient = clamp(0.5 + 0.5 * normal.y, 0.0, 1.0);
        float diffuse = clamp(dot(normal, lightDir), 0.0, 2.0);
        
        if (diffuse > 0.05) {
            diffuse *= shadows(hitPos, lightDir, 8.0, 12.0, geoLOD, cameraPos, forward);
        }
        
        finalColor += (0.4 * ambient) * lightColor;
        finalColor *= (1.8 * diffuse) * lightColor;
    }
    else if (rayResult.y == MATERIAL_OCEAN) {
        vec3 oceanNormal = calculateNormal(hitPos.xz, 0.01, WATER_DEPTH);
        
        float fresnel = (0.04 + (1.0 - 0.04) * pow(1.0 - max(0.0, dot(oceanNormal, rd)), 5.0));
        
        vec3 R = normalize(reflect(rd, oceanNormal));
        R.y = abs(R.y);
        
        vec3 reflection = getAtmosphere(R) + getSun(R);
        vec3 scattering = vec3(0.0293, 0.0698, 0.1717) * 0.1 * (0.2 + (hitPos.y + WATER_DEPTH) / WATER_DEPTH);
        
        vec3 waterColor = fresnel * reflection + scattering;
        
        waterColor += 0.1 * cnoise(hitPos.xz * 5.0 + iTime * 0.5) * vec3(1.0);
        
        waterColor *= (0.3 + 0.6 * clamp(dot(oceanNormal, lightDir), 0.0, 1.0));
        
        finalColor = waterColor;
    }

    // Reduced Fog Effect
    // Original: float fogFactor = exp(-0.035 * rayResult.x * rayResult.x);
    // Reduced the exponent to make fog less dense
    float fogFactor = exp(-0.015 * rayResult.x * rayResult.x); // Reduced from 0.035 to 0.015

    // Original: finalColor = mix(vec3(0.3, 0.3, 0.35), finalColor, fogFactor);
    // Adjusted the mix factor to blend less with the fog color
    finalColor = mix(vec3(0.3, 0.3, 0.35), finalColor, fogFactor); // Multiplied fogFactor to retain more of the scene color
    
    return finalColor;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 normalizedPos = 2.0 * (fragCoord.xy / iResolution.xy) - 1.0;
    normalizedPos.x *= iResolution.x / iResolution.y;

    vec3 ray = getRay(fragCoord);
    vec3 ro = vec3(iTime * 0.2, 1.5, 1.0);
    vec3 rd = ray;

    vec3 cameraPos = ro;
    cameraPos.y = terrain(cameraPos.xz, 1) + 1.5;

    vec3 forward = normalize(vec3(1.0, 0.0, 0.0));
    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));
    vec3 upDir = cross(right, forward);
    
    rd = normalize(normalizedPos.x * right + normalizedPos.y * upDir + 2.0 * forward);
    
    vec3 finalColor = render(cameraPos, rd, cameraPos, forward);
    
    finalColor = aces_tonemap(finalColor * 2.0);
    
    fragColor = vec4(finalColor, 1.0);
}
