#define MAX_DIST 320.0
#define MAX_STEPS 80
#define THRESHOLD 0.01
#include "lygia/math/rotate3dX.glsl"
#include "lygia/generative/snoise.glsl"

struct Light {
    vec3 pos;
    vec3 color;
};

struct Material {
    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor;
    float shininess;
};

Material dirt() {
    vec3 aCol = 0.4 * vec3(0.5, 0.35, 0.2);
    vec3 dCol = 0.7 * vec3(0.55, 0.4, 0.25);
    vec3 sCol = 0.3 * vec3(1.0);
    float a = 16.0;
    return Material(aCol, dCol, sCol, a);
}

float fbm(vec3 p) {
    float f = 0.0;
    float amplitude = 0.5;
    float frequency = 0.5; // Lower starting frequency for larger features
    for(int i = 0; i < 6; i++) { // Maintain complexity with 6 layers
        f += amplitude * snoise(p * frequency);
        p *= 2.0;
        amplitude *= 0.5;
        frequency *= 1.5; // Gradual increase in frequency for subtle detail
    }
    return f;
}

float rockHeight(vec3 p) {
    // Base noise with lower frequency for larger rock "mounds"
    float base = 1.2 * fbm(vec3(p.x * 0.3, p.y, p.z * 0.3)) - 0.4;

    // Extra jaggedness with large, spaced-out spikes
    float spikes = abs(snoise(vec3(p.x * 0.4, p.y, p.z * 0.4)) * 2.0) - 0.6;

    // Combine base and spikes with increased influence for bigger rocks
    return base + spikes;
}

float sdPlane(vec3 p, vec3 n, float h) {
    // n must be normalized
    return dot(p, n) + h;
}

vec2 scene(vec3 p) {
    // Modify y-coordinate based on the enhanced rockHeight function
    p.y += rockHeight(p);
    // Distance from a base plane
    float d = sdPlane(p, vec3(0.0, 1.0, 0.0), 2.0);
    return vec2(d, 0.0);
}

vec3 calcNormal(vec3 p) {
    const float h = 0.0001; // Increased epsilon for better precision
    const vec2 k = vec2(1.0, -1.0);
    return normalize(
        k.xyy * scene(p + vec3(k.x, k.y, k.y) * h).x +
        k.yyx * scene(p + vec3(k.y, k.y, k.x) * h).x +
        k.yxy * scene(p + vec3(k.y, k.x, k.y) * h).x +
        k.xxx * scene(p + vec3(k.x, k.x, k.x) * h).x
    );
}

float shadows(vec3 rayOrigin, vec3 light) {
    float d = 0.0;
    vec3 rayHeading = normalize(light - rayOrigin);
    float val = 1.0;
    for(int i = 0; i < MAX_STEPS; i++) {
        vec3 p = rayOrigin + d * rayHeading;
        float sd = scene(p).x;

        if(sd < THRESHOLD) {
            return 0.0;
        }

        val = min(val, 8.0 * sd / d);
        float distToLight = length(light - p);
        if(distToLight < THRESHOLD) {
            return val;
        }

        d += min(sd, distToLight);
        if(d > MAX_DIST) {
            break;
        }
    }
    return 1.0;
}

vec3 lighting(vec3 p) {
    vec3 lightDir = normalize(vec3(-0.5, 0.8, 0.6));
    vec3 ambient = vec3(0.2); 

    vec3 norm = calcNormal(p);
    float diffuse = max(dot(norm, lightDir), 0.0); 

    
    vec3 color = ambient + diffuse * vec3(1.0, 0.9, 0.8); 
    
    return color;
}


vec3 rayMarch(vec3 rayOrigin, vec3 rayHeading) {
    float d = 0.0;
    for(int i = 0; i < MAX_STEPS; i++) {
        vec3 p = rayOrigin + d * rayHeading;
        vec2 march = scene(p);
        float sd = march.x;

        vec3 color = vec3(1.0);
        if(sd < THRESHOLD) {
            return color * lighting(p);
        }
        d += sd;
        if(d > MAX_DIST) {
            break;
        }
    }
    return vec3(0.53, 0.81, 0.92);
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 uv = fragCoord / iResolution.xy;
    uv -= 0.5;
    uv.x *= iResolution.x / iResolution.y;
    float engine = mod(iTime, 41.);
    vec3 rd = normalize(vec3(uv, -1.5)); // Increased z-component for a wider view
    rd = rotate3dX(-0.) * rd; // Adjusted rotation for better perspective
    vec3 ro = vec3(0.0, -1., 0.0-engine); // Elevated camera position for larger terrain features

    vec3 col = rayMarch(ro, rd);

    fragColor = vec4(col, 1.0);
}
